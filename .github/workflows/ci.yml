name: CI

on:
  pull_request:
    branches:
      - master

jobs:
  build-and-run:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.15'

      - name: Install dependencies
        run: npm install

      - name: Set up development environment
        run: |
          # Step 1: Create a .env file
          echo "MODE='development'" > .env
          echo "BLOB_STORAGE_URL='DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;'" >> .env

          # Step 2: Install application dependencies
          npm install

          # Step 3: Install Azure CLI
          if [ "$(uname)" = "Darwin" ] || [ "$(expr substr $(uname -s) 1 5)" = "Linux" ]; then
            curl -sL https://aka.ms/InstallAzureCLIDeb | bash
          elif [ "$(expr substr $(uname -s) 1 10)" = "MINGW32_NT" ] || [ "$(expr substr $(uname -s) 1 10)" = "MINGW64_NT" ]; then
            Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile AzureCLI.msi
            Start-Process msiexec.exe -Wait -ArgumentList '/I AzureCLI.msi /quiet'
          fi

          # Step 4: Verify Azure CLI installation
          az version

          # Step 5: Install Azurite for local development
          npm install -g azurite

          # Step 6: Start Azurite Blob service
          azurite-blob -l ./azure-blob-storage

          # Step 7: Create Blob storage container using Azure CLI
          az storage container create --name turing-videos --connection-string "DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;"

      - name: Run linting
        run: npm run lint

      - name: Run build
        run: npm run build
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pr_id: [ ${ { github.event.number } } ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Docker image
        run: |
          docker build -t your-image-name:${{ matrix.pr_id }} .
          echo "::set-output name=image_tag::your-image-name:${{ matrix.pr_id }}"
  test:
    name: Run Tests
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pr_id: [ ${ { github.event.number } } ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Docker container with npm test
        run: docker run your-image-name:${{ needs.build.outputs.image_tag }} npm test

  lint:
    name: Run Linter
    needs: build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        pr_id: [ ${ { github.event.number } } ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Docker container with linting
        run: docker run your-image-name:${{ needs.build.outputs.image_tag }} npm run lint

  start:
    name: Start Application
    needs: build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        pr_id: [ ${ { github.event.number } } ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Docker container to start application
        run: docker run your-image-name:${{ needs.build.outputs.image_tag }} npm start

