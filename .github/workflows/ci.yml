name: CI

on:
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  platform-build:
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        os: [ubuntu-latest]

    env:
      MODE: ${{ secrets.MODE }}
      BLOB_STORAGE_URL: ${{ secrets.BLOB_STORAGE_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.15'
          python-version: '3.11'
      - name: Display Node.js version
        run: |
          node --version

      - name: Display npm version
        run: |
          npm --version

      - name: Display Python version
        run: |
          python --version
      - name: Install dependencies
        run: npm install

      - name: Set up development environment
        run: |
          # Step 1: Create a .env file
          echo "MODE='${MODE}'" > .env
          echo "BLOB_STORAGE_URL='${BLOB_STORAGE_URL}'" >> .env

          # Step 2: Install application dependencies
          npm ci

          # Step 3: Install Azure CLI
          if [ "$(uname)" = "Darwin" ] || [ "$(expr substr $(uname -s) 1 5)" = "Linux" ]; then
            curl -sL https://aka.ms/InstallAzureCLIDeb | bash
          elif [ "$(expr substr $(uname -s) 1 10)" = "MINGW32_NT" ] || [ "$(expr substr $(uname -s) 1 10)" = "MINGW64_NT" ]; then
            Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile AzureCLI.msi
            Start-Process msiexec.exe -Wait -ArgumentList '/I AzureCLI.msi /quiet'
          fi

          # Step 4: Verify Azure CLI installation
          az version

          # Step 5: Install Azurite for local development
          npm install -g azurite

          # Step 6: Start Azurite Blob service
          azurite-blob -l ./azure-blob-storage &

          # Step 7: Create Blob storage container using Azure CLI
          az storage container create --name turing-videos --connection-string "${BLOB_STORAGE_URL}"

      - name: Run linting
        run: npm run lint

      - name: Run build
        run: npm run build
  sanity-checks:
    runs-on: ubuntu-latest

    env:
      MODE: ${{ secrets.MODE }}
      BLOB_STORAGE_URL: ${{ secrets.BLOB_STORAGE_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: jpribyl/action-docker-layer-caching@v0.1.1

      - name: Build Docker image
        id: build
        run: |
          docker build -t trace:${{ github.event.number }} .
          echo "::set-output name=image_tag::trace:${{ github.event.number }}"

      - name: Run Tests
        id: test
        run: docker run -e MODE="${MODE}" -e BLOB_STORAGE_URL="${BLOB_STORAGE_URL}" ${{ steps.build.outputs.image_tag }} npm test
        if: false

      - name: Run Linter
        id: lint
        run: docker run -e MODE="${MODE}" -e BLOB_STORAGE_URL="${BLOB_STORAGE_URL}" ${{ steps.build.outputs.image_tag }} npm run lint
