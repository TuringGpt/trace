name: CI

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      platform:
        description: 'Choose the platform to build on'
        required: true
        default: 'ubuntu'
        options:
          - ubuntu
          - windows
          - macOs

jobs:

  sanity-checks:
    if: github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest
    env:
      BLOB_STORAGE_URL: ${{ secrets.BLOB_STORAGE_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Docker image
        id: build
        run: |
          docker build -t trace:${{ github.event.number }}  --build-arg BLOB_STORAGE_URL="${{ env.BLOB_STORAGE_URL }}" .
          echo "::set-output name=image_tag::trace:${{ github.event.number }}"

      - name: Run Linter
        id: lint
        run: docker run -e BLOB_STORAGE_URL="${{ env.BLOB_STORAGE_URL }}" ${{ steps.build.outputs.image_tag }} npm run lint

      - name: Run Tests
        id: test
        run: docker run -e BLOB_STORAGE_URL="${{ env.BLOB_STORAGE_URL }}" ${{ steps.build.outputs.image_tag }} npm test
        if: false

  platform-build:
    if: |
      github.event_name == 'workflow_dispatch' && (
        github.event.inputs.platform == 'ubuntu' ||
        github.event.inputs.platform == 'windows' ||
        github.event.inputs.platform == 'macOs'
      )
    runs-on: ${{ github.event.inputs.platform }}-latest
    env:
      BLOB_STORAGE_URL: ${{ secrets.BLOB_STORAGE_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.15'
          python-version: '3.11'

      - name: Install Azure CLI on macOS
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install azure-cli
          brew install python-setuptools

      - name: Install Azure CLI on Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y ca-certificates curl apt-transport-https lsb-release gnupg
          curl -sL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/microsoft.gpg > /dev/null
          AZ_REPO=$(lsb_release -cs)
          echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | sudo tee /etc/apt/sources.list.d/azure-cli.list
          sudo apt-get update
          sudo apt-get install azure-cli

      - name: Install Azure CLI on Windows
        if: runner.os == 'Windows'
        run: |
          Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile AzureCLI.msi
          Start-Process msiexec.exe -Wait -ArgumentList '/I AzureCLI.msi /quiet'

      - name: Set up .env file
        run: |
          echo "BLOB_STORAGE_URL='${{ env.BLOB_STORAGE_URL }}'" > .env
          cat .env

      - name: Install application dependencies
        run: npm ci

      - name: Verify Azure CLI installation
        run: az version

      - name: Install Azurite for local development
        run: npm install -g azurite

      - name: Initialize storage and execute actions
        run: |
          # Start Azurite Blob service
          azurite-blob -l ./azure-blob-storage &
          # Create Blob storage container using Azure CLI
          az storage container create --name turing-videos --connection-string "${{ env.BLOB_STORAGE_URL }}"
          # Run lint
          npm run lint
          # Run build
          npm run build

  deploy-cloud-run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.15'

      - name: Change to cloud-run directory # can be from configuration/job name/trigger input value
        run: cd cloud-runs/remux/

      - name: Build Docker image
        run: |
          docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_IMAGE_NAME }}:latest .
      - name: Authenticate to Google Container Registry
        run: echo "${{ secrets.GCR_JSON_KEY }}" | docker login -u _json_key --password-stdin https://gcr.io

      - name: Push Docker image
        run: |
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_IMAGE_NAME }}:latest

      - name: Install dependencies
        run: npm install

      - name: Deploy to Google Cloud Run
        run: npm run deploy
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GCP_SA_KEY_PATH }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_REGION: ${{ secrets.GCP_REGION }}
          GCP_SERVICE_NAME: ${{ secrets.GCP_SERVICE_NAME }}
          GCP_IMAGE_NAME: ${{ secrets.GCP_IMAGE_NAME }}
